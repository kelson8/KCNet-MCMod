plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.99'
    id 'idea'

    // https://projects.neoforged.net/neoforged/neogradle

    //---- Enable this for Yet Another Config Lib
    // https://github.com/thedarkcolour/KotlinForForge/blob/5.x/README.md
    // Adds the Kotlin Gradle plugin
//    id 'org.jetbrains.kotlin.jvm' version '2.1.21'
    // OPTIONAL Kotlin Serialization plugin
    //id 'org.jetbrains.kotlin.plugin.serialization' version '2.1.21'
}

// New for creating a version file

// https://stackoverflow.com/questions/33020069/how-to-get-version-attribute-from-a-gradle-build-to-be-included-in-runtime-swing
//tasks.register('createProperties') {
//    dependsOn processResources
//    doLast {
//        new File("$buildDir/resources/main/version.properties").withWriter { w ->
//            Properties p = new Properties()
//            p['version'] = project.version.toString()
//            p.store w, null
//        }
//    }
//}

//

//


// Add this task to create a resource file with project version
// https://codingtechroom.com/question/how-to-retrieve-project-version-from-build-gradle-in-java-class

// Working method to create version from gradle
//-----

// Define a task to create the version.properties file.
// Using tasks.register for lazy task creation, which is a best practice.
tasks.register('createVersionFile') {
    // Define the output file for this task.
    // We use layout.projectDirectory to get a reference to the project's root directory,
    // and then specify the path to the resources folder.
    // .asFile converts the RegularFileProperty to a standard Java File object.
    def versionFile = layout.projectDirectory.file("src/main/resources/version.properties").asFile

    // Declare the output of this task. This helps Gradle determine task dependencies
    // and enables incremental builds and task caching.
    outputs.file(versionFile).withPropertyName("versionPropertiesFile")

    // Define properties on the task to hold the project version, name, and description.
    // These capture the project properties during configuration time.
    def modVersion = project.objects.property(String)
    modVersion.set(project.version.toString())

    def modName = project.objects.property(String)
    // Capture the mod_name from gradle.properties.
    // Use project.findProperty() to access properties defined in gradle.properties.
    // Fallback to project.name.toString() if mod_name is not found in gradle.properties.
    modName.set(project.findProperty('mod_name')?.toString() ?: project.name.toString())

    def modDescription = project.objects.property(String)
    // Capture the mod_description from gradle.properties
    // Use project.findProperty() to access properties defined in gradle.properties
    modDescription.set(project.findProperty('mod_description')?.toString() ?: "")

    // The action to perform when the task runs.
    doLast {
        // Ensure the parent directory for the version file exists.
        versionFile.parentFile.mkdirs()
        // Write all properties to the file.
        // Escape newline characters in the description to prevent breaking the .properties file format.
        def escapedDescription = modDescription.get().replace('\n', '\\n')
        versionFile.text = """\
project.version=${modVersion.get()}
project.name=${modName.get()}
project.description=${escapedDescription}
"""
        println "Generated version.properties with project.version=${modVersion.get()}, name=${modName.get()}, description=${modDescription.get()}"
    }
}


// Configure the 'processResources' task to depend on 'createVersionFile'.
// This ensures that 'createVersionFile' runs and generates the version.properties
// before 'processResources' collects and copies the resources into the build output.
// Using tasks.named() ensures lazy configuration of existing tasks.
tasks.named('processResources') {
    dependsOn(tasks.named('createVersionFile'))
}

//

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    // Add here additional repositories if required by some of the dependencies below.

    // Bookshelf test
    maven {
        url = 'https://maven.blamejared.com'
    }

    // https://shedaniel.gitbook.io/cloth-config/setup-cloth-config/setup-with-forge
    maven {
        url = "https://maven.shedaniel.me/"
    }

    maven {
        url = "https://maven.txni.dev/"
    }
    maven {
        url = "https://maven.su5ed.dev/releases"
    }

    // https://github.com/Glitchfiend/TerraBlender/wiki/Getting-started
    maven {
        url = 'https://maven.minecraftforge.net/'
    }

    //---- Enable these for Yet Another Config Lib
    // https://docs.isxander.dev/yet-another-config-lib/installing-yacl
//    maven {
//        name 'Xander Maven'
//        url 'https://maven.isxander.dev/releases'
//    }
//
//    // https://github.com/thedarkcolour/KotlinForForge/blob/5.x/README.md
//    // Add KFF Maven repository
//    maven {
//        name = 'Kotlin for Forge'
//        url = 'https://thedarkcolour.github.io/KotlinForForge/'
//    }

    //----------
}

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users in 1.21.1, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // Example optional mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
    // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
    // localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html




    //---------

    //---
    // Neo Gradle test
    // https://projects.neoforged.net/neoforged/neogradle
//    implementation 'net.neoforged:neoforge:7.0.190'
//    implementation 'net.neoforged:neoforge:${project}'

    //



    //---
    // I got this to build and work, not sure how to use it so i'll disable it for now.
    // https://docs.isxander.dev/yet-another-config-lib/installing-yacl
//    compileOnly fg.deobf("dev.isxander:yet-another-config-lib:${project.yacl_version}")
//    implementation("dev.isxander:yet-another-config-lib:${project.yacl_version}")
//    fg.deobf

    //

    // Kotlin for Forge
//    implementation 'thedarkcolour:kotlinforforge-neoforge:5.9.0'

    // TODO Figure out how to use these later

    // Bookshelf test
    // https://docs.darkhax.net/1.20.1/bookshelf/dependency_info/
    // https://mvnrepository.com/artifact/net.darkhax.bookshelf/bookshelf-neoforge-1.21.1/21.1.67
//    implementation "net.darkhax.bookshelf:bookshelf-neoforge-1.21.1:21.1.67"
    localRuntime("net.darkhax.bookshelf:bookshelf-neoforge-1.21.1:21.1.67")

    // https://linkie.shedaniel.dev/dependencies?loader=neoforge&version=1.21.1
//    implementation("me.shedaniel.cloth:cloth-config-neoforge:15.0.140")

    // https://www.curseforge.com/minecraft/mc-mods/sodium-options-api
    // I'm not sure how to make this one work.
    // I could possibly add options to Sodium.
//    implementation("maven.modrinth:sodium-options-api:1.21.1-neoforge")


    //----
    // https://immersive.txni.dev/guide
    // TODO Figure this out
    // It should allow me to use a custom message API like sending messages to the player.
//    implementation("toni.immersivemessages:${loader}-${mcVersion}:${immersiveMessagesVersion}") { isTransitive = false }
//    implementation("tony.immersivemessages:neoforge-1.21.1:1.0.18")
//    implementation("toni.txnilib:neoforge-1.21.1:1.0.24")
//    implementation("toni.txnilib:${loader}-${mcVersion}:${txnilibVersion}")

    //---------


}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
